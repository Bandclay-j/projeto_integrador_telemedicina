/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package br.com.telemedicina.subtelas;

import br.com.telemedicina.bd.BD;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Talisson53899806
 */
public class HistoricoPrescricao extends javax.swing.JInternalFrame {

    /**
     * Creates new form HistoricoPrescricao
     */
    public HistoricoPrescricao() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaHistoricoPrescricao = new javax.swing.JTable();
        botaoConsulta = new javax.swing.JButton();
        botaoExcluirMed = new javax.swing.JButton();
        botaoEditar = new javax.swing.JButton();

        setClosable(true);
        setForeground(new java.awt.Color(0, 0, 0));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setDividerSize(0);

        jPanel1.setBackground(new java.awt.Color(46, 169, 248));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/imagemHistoricodePrescricao.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel1)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(jLabel1)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 42)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Histórico de Prescrições");

        tabelaHistoricoPrescricao.setBackground(new java.awt.Color(102, 102, 102));
        tabelaHistoricoPrescricao.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tabelaHistoricoPrescricao.setForeground(new java.awt.Color(255, 255, 255));
        tabelaHistoricoPrescricao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome Médico", "Nome Paciente", "Data Prescrição"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaHistoricoPrescricao);

        botaoConsulta.setBackground(new java.awt.Color(204, 102, 0));
        botaoConsulta.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        botaoConsulta.setForeground(new java.awt.Color(255, 255, 255));
        botaoConsulta.setText("Consultar");
        botaoConsulta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botaoConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConsultaActionPerformed(evt);
            }
        });

        botaoExcluirMed.setBackground(new java.awt.Color(204, 0, 0));
        botaoExcluirMed.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        botaoExcluirMed.setForeground(new java.awt.Color(255, 255, 255));
        botaoExcluirMed.setText("Excluir");
        botaoExcluirMed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botaoExcluirMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirMedActionPerformed(evt);
            }
        });

        botaoEditar.setBackground(new java.awt.Color(0, 0, 204));
        botaoEditar.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        botaoEditar.setForeground(new java.awt.Color(255, 255, 255));
        botaoEditar.setText("Editar");
        botaoEditar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botaoEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel2)
                        .addGap(0, 272, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoExcluirMed, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoExcluirMed, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1230, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConsultaActionPerformed
        BD banco = new BD();
        banco.conectaBD();
        
        String query = "SELECT pr.ID, me.nomeMed, pa.nome, pr.dataPrescricao FROM Medico me INNER JOIN prescricao pr ON me.ID = pr.ID_MEDICO INNER JOIN Paciente pa ON pa.ID = pr.ID_PACIENTE";
        PreparedStatement ps = banco.getPreparedStatement(query);
        
        try {
            ResultSet rs = ps.executeQuery();
            
            DefaultTableModel model = (DefaultTableModel) this.tabelaHistoricoPrescricao.getModel();
            if (model.getRowCount() > 0) {
                model.setNumRows(0);
            }
            
            while (rs.next()) {
                String[] dados = {  rs.getString("pr.ID"),
                                    rs.getString("me.nomeMed"),
                                    rs.getString("pa.nome"),
                                    rs.getDate("pr.dataPrescricao").toString()};
                
                model.addRow(dados);
            }
            
            this.tabelaHistoricoPrescricao.setModel(model);
            rs.close();
            ps.close();
            banco.encerrarConexao();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Não foi possível fazer a Consulta no BD!!!! Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_botaoConsultaActionPerformed

    private void botaoExcluirMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirMedActionPerformed
        //Codigo de exclusão de registro de prescrição
        int linhaSelecionada = this.tabelaHistoricoPrescricao.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this,
                "Favor selecione um registro para excluir!");
            return;
        }

        String idPaciente =
        (String) this.tabelaHistoricoPrescricao.getValueAt(linhaSelecionada, 0);

        int opcao = JOptionPane.showConfirmDialog(this,
            "Deseja realmente excluir a Prescricão " + idPaciente + "?",
            "Excluir", JOptionPane.OK_CANCEL_OPTION);

        if (opcao == 0) {
            BD banco = new BD();
            banco.conectaBD();
            
            String query1 = "DELETE FROM Prescricao WHERE ID_MEDICO = (SELECT ID FROM Medico WHERE nomeMed = ?)"; 
            String query2 = "DELETE FROM Prescricao WHERE ID = ?";

            try (PreparedStatement ps =banco.getPreparedStatement(query2)){
                ps.setString(1, query1);
                ps.setString(1, query2);
                boolean linhaApagada = ps.execute();

                if (linhaApagada == false) {
                    //Remove a linha da jTable
                    DefaultTableModel model = (DefaultTableModel) this.tabelaHistoricoPrescricao.getModel();
                    model.removeRow(linhaSelecionada);
                    JOptionPane.showMessageDialog(this,
                        "Histórico excluido com sucesso!!");
                    
                    botaoConsultaActionPerformed(evt);

                } else {
                    JOptionPane.showMessageDialog(this,
                        "Nenhum histórico encontrado para excluir.");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                    "Erro ao excluir o histórico: " + ex.getMessage());
                ex.printStackTrace();
            } finally {
                return;
            }
        }
    }//GEN-LAST:event_botaoExcluirMedActionPerformed

    private void botaoEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarActionPerformed
        int linhaSelecionada = this.tabelaHistoricoPrescricao.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this,
                    "Favor selecione um registro para editar!!");
            
            return;
        }
        
        String ID             = (String) this.tabelaHistoricoPrescricao.getValueAt(linhaSelecionada, 0);
        String nomeMedico     = (String) this.tabelaHistoricoPrescricao.getValueAt(linhaSelecionada, 1);
        String nomePaciente   = (String) this.tabelaHistoricoPrescricao.getValueAt(linhaSelecionada, 2);
        String dataPrescricao = (String) this.tabelaHistoricoPrescricao.getValueAt(linhaSelecionada, 3);
        
        String novaDataPrescricao = JOptionPane.showInputDialog(this,
                "Editar data da Prescrição (YYYY-MM-DD):",
                dataPrescricao);
        
        if(novaDataPrescricao != null) {
            BD banco = new BD();
            boolean conectado = banco.conectaBD();
            
            if(!conectado) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao conectar ao Banco de Dados!!!!");
                
                return;
            }
            
            String updatedQuery = "UPDATE Prescricao SET dataPrescricao = ? WHERE ID = ?";
            
            try (PreparedStatement ps = banco.getPreparedStatement(updatedQuery)) {
                ps.setString(1, novaDataPrescricao);
                ps.setString(2, ID);
                
                int rowsUpdated = ps.executeUpdate();
                
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this,
                            "Registro atualizado com sucesso!!");
                    
                    botaoConsultaActionPerformed(evt);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Nenhum registro encontrado para editar!!");
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao atualizar o registro!! Error: " + ex.getMessage());
            
            } finally {
                banco.encerrarConexao();
            }
        }
    }//GEN-LAST:event_botaoEditarActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        try (BufferedReader br = new BufferedReader(new FileReader("sessao"))) {
            //lê o arquivo para saber se é paciente ou médico
            String linha;
            String[] dados = {};
            
            while ((linha = br.readLine()) != null) {
                dados = linha.split(",");
            }
            
            if (dados[1].equals("Paciente")) {
                this.botaoEditar.setVisible(false);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Erro ao ler o arquivo!! Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_formInternalFrameOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoConsulta;
    private javax.swing.JButton botaoEditar;
    private javax.swing.JButton botaoExcluirMed;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tabelaHistoricoPrescricao;
    // End of variables declaration//GEN-END:variables
}
