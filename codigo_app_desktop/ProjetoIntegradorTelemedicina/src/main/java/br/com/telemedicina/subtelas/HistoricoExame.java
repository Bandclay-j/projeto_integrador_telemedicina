/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package br.com.telemedicina.subtelas;

import br.com.telemedicina.bd.BD;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Josue53508706
 */
public class HistoricoExame extends javax.swing.JInternalFrame {

    /**
     * Creates new form HistoricoExame
     */
    public HistoricoExame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaHistoricoExames = new javax.swing.JTable();
        botaoConsulta = new javax.swing.JButton();
        botaoExcluirMed = new javax.swing.JButton();
        BotaoEditar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setDividerSize(0);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 42)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Histórico de Exames");

        tabelaHistoricoExames.setBackground(new java.awt.Color(102, 102, 102));
        tabelaHistoricoExames.setForeground(new java.awt.Color(255, 255, 255));
        tabelaHistoricoExames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome Clínica", "Descrição Exame", "Data Exame", "Status Exame", "Diagnostico Exame", "Valor Exame"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaHistoricoExames);

        botaoConsulta.setBackground(new java.awt.Color(255, 102, 0));
        botaoConsulta.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        botaoConsulta.setForeground(new java.awt.Color(0, 0, 0));
        botaoConsulta.setText("Consultar");
        botaoConsulta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botaoConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConsultaActionPerformed(evt);
            }
        });

        botaoExcluirMed.setBackground(new java.awt.Color(204, 0, 0));
        botaoExcluirMed.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        botaoExcluirMed.setForeground(new java.awt.Color(0, 0, 0));
        botaoExcluirMed.setText("Excluir");
        botaoExcluirMed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botaoExcluirMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirMedActionPerformed(evt);
            }
        });

        BotaoEditar.setBackground(new java.awt.Color(0, 0, 255));
        BotaoEditar.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        BotaoEditar.setForeground(new java.awt.Color(0, 0, 0));
        BotaoEditar.setText("Editar");
        BotaoEditar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotaoEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(98, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(188, 188, 188))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botaoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoExcluirMed, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotaoEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoExcluirMed, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotaoEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(46, 169, 248));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/imagemHistoricoExame.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jLabel2)
                .addContainerGap(111, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConsultaActionPerformed
        BD banco = new BD();
        banco.conectaBD();

        String query = "SELECT ex.ID, cl.nomeClinica, ex.descricaoExame, ex.dataExame, ex.statusExame, ex.diagnosticoExame, ex.valorExame FROM Clinica cl INNER JOIN Exame ex ON cl.ID = ex.ID_CLINICA";
        PreparedStatement ps = banco.getPreparedStatement(query);

        try {
            ResultSet rs = ps.executeQuery();

            DefaultTableModel model = (DefaultTableModel) this.tabelaHistoricoExames.getModel();
            if (model.getRowCount() > 0) {
                model.setNumRows(0);
            }

            while (rs.next()) {
                String[] dados = {  rs.getString("ex.ID"),
                                    rs.getString("cl.nomeClinica"),
                                    rs.getString("ex.descricaoExame"),
                                    rs.getDate("ex.dataExame").toString(),
                                    rs.getString("ex.statusExame"),
                                    rs.getString("ex.diagnosticoExame"),
                                    rs.getString("ex.valorExame")};

                model.addRow(dados);
            }

            this.tabelaHistoricoExames.setModel(model);
            rs.close();
            ps.close();
            banco.encerrarConexao();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                "Não foi possível fazer a Consulta no BD!!!! Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_botaoConsultaActionPerformed

    private void botaoExcluirMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirMedActionPerformed
        int linhaSelecionada = this.tabelaHistoricoExames.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this,
                "Favor selecione um histórico para excluir!");
            return;
        }

        String idPaciente =
        (String) this.tabelaHistoricoExames.getValueAt(linhaSelecionada, 0);

        int opcao = JOptionPane.showConfirmDialog(this,
            "Deseja realmente excluir o Exame " + idPaciente + "?",
            "Excluir", JOptionPane.OK_CANCEL_OPTION);

        if (opcao == 0) {
            BD banco = new BD();
            banco.conectaBD();

            String query2 = "DELETE FROM Exame ex WHERE ex.ID_CLINICA = (SELECT ID FROM Medico m WHERE m.nomeClinica = ?)";
            String query = "DELETE FROM Exame ex WHERE ex.ID = ?";

            try (PreparedStatement ps =banco.getPreparedStatement(query)){
                ps.setString(1, query2);
                ps.setString(1, query);
                ps.setString(1, idPaciente);
                boolean linhaApagada = ps.execute();

                if (linhaApagada == false) {
                    //Remove a linha da jTable
                    DefaultTableModel model = (DefaultTableModel) this.tabelaHistoricoExames.getModel();
                    model.removeRow(linhaSelecionada);
                    JOptionPane.showMessageDialog(this,
                        "Histórico excluido com sucesso!!");
                    
                    botaoConsultaActionPerformed(evt);
                    
                } else {
                    JOptionPane.showMessageDialog(this,
                        "Nenhum histórico encontrado para excluir.");   
                    
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                    "Erro ao excluir o histórico: " + ex.getMessage());
                ex.printStackTrace();
                
            } finally {
                return;
                
            }
        }
    }//GEN-LAST:event_botaoExcluirMedActionPerformed

    private void BotaoEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoEditarActionPerformed
        int linhaSelecionada = this.tabelaHistoricoExames.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this,
                    "Favor selecione um registro pra editar!!");
            
            return;
        }
        
        //Obtendo os dados da linha selecionada
        String ID               = (String) this.tabelaHistoricoExames.getValueAt(linhaSelecionada, 0);
        String nomeClinica      = (String) this.tabelaHistoricoExames.getValueAt(linhaSelecionada, 1);
        String descricaoExame   = (String) this.tabelaHistoricoExames.getValueAt(linhaSelecionada, 2);
        String dataExame        = (String) this.tabelaHistoricoExames.getValueAt(linhaSelecionada, 3);
        String statusExame      = (String) this.tabelaHistoricoExames.getValueAt(linhaSelecionada, 4);
        String diagnosticoExame = (String) this.tabelaHistoricoExames.getValueAt(linhaSelecionada, 5);
        String valorExame       = (String) this.tabelaHistoricoExames.getValueAt(linhaSelecionada, 6);
        
        //Solicitando a nova informação
        String novaDescricaoExame = JOptionPane.showInputDialog(this,
                "Editar a descrição do exame:",
                descricaoExame);
        
        String novaDataExame = JOptionPane.showInputDialog(this,
                "Editar a data do Exame (YYYY-MM-DD):",
                dataExame);
        
        String novoStatusExame = JOptionPane.showInputDialog(this,
                "Editar o Status do Exame (Finalizado, Em andamento):",
                statusExame);
        
        String novoDiagnosticoExame = JOptionPane.showInputDialog(this,
                "Editar o Diagnóstico do Exame:",
                diagnosticoExame);
        
        String novoValorExame = JOptionPane.showInputDialog(this,
                "Editar o Valor do Exame (00.0):",
                valorExame);
        
        if (novaDescricaoExame   != null ||
            novaDataExame        != null ||
            novoStatusExame      != null ||
            novoDiagnosticoExame != null ||
            novoValorExame       != null) {
         
            BD banco = new BD();
            boolean conectado =banco.conectaBD();
            
            if (!conectado) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao conectar no Banco de Dados!!");
                
                return;
            }
            
            //Atualiza data, status, diagnostico, valor
            String updateQuery = "UPDATE Exame SET diagnosticoExame = ?, statusExame = ?, dataExame = ?, descricaoExame = ?, valorExame = ? WHERE ID = ?";
            
            try (PreparedStatement ps = banco.getPreparedStatement(updateQuery)) {
                ps.setString(1,novoDiagnosticoExame);
                ps.setString(2,novoStatusExame);
                ps.setString(3,novaDataExame);
                ps.setString(4, novaDescricaoExame);
                ps.setString(5, novoValorExame);
                ps.setString(6, ID);
                
                int rowsUpdated = ps.executeUpdate();
                
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this,
                            "Registro atualizado com sucesso!!");
                    
                    botaoConsultaActionPerformed(evt);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Nenhum Registro encontrado para atualizar!!");
                    
                }
            
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao atualizar o registro!! Error: " + ex.getMessage());
            
            } finally {
                banco.encerrarConexao();
            }
        }
    }//GEN-LAST:event_BotaoEditarActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        try (BufferedReader br = new BufferedReader(new FileReader("sessao"))) {
            //lê o arquivo para saber se é paciente ou médico
            String linha;
            String[] dados = {};
            
            while ((linha = br.readLine()) != null) {
                dados = linha.split(",");
            }
            
            if (dados[1].equals("Paciente")) {
                this.BotaoEditar.setVisible(false);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Erro ao ler o arquivo!! Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_formInternalFrameOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotaoEditar;
    private javax.swing.JButton botaoConsulta;
    private javax.swing.JButton botaoExcluirMed;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tabelaHistoricoExames;
    // End of variables declaration//GEN-END:variables
}
