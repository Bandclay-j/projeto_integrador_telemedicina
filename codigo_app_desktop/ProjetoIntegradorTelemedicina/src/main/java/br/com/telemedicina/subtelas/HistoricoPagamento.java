/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package br.com.telemedicina.subtelas;

import br.com.telemedicina.bd.BD;
import br.com.telemedicina.repository.PacienteRepository;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Talisson53899806
 */
public class HistoricoPagamento extends javax.swing.JInternalFrame {

    /**
     * Creates new form HistoricoPagamento
     */
    public HistoricoPagamento() {
        initComponents();
    }
    
    PacienteRepository pacRepo = new PacienteRepository();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaHistoricoPagamento = new javax.swing.JTable();
        consultarBotao = new javax.swing.JButton();
        excluirBotao = new javax.swing.JButton();
        editarBotao = new javax.swing.JButton();

        setClosable(true);
        setResizable(true);

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setDividerSize(0);

        jPanel1.setBackground(new java.awt.Color(46, 169, 248));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 658, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 42)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Histórico de Pagamentos");

        tabelaHistoricoPagamento.setBackground(new java.awt.Color(102, 102, 102));
        tabelaHistoricoPagamento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tabelaHistoricoPagamento.setForeground(new java.awt.Color(255, 255, 255));
        tabelaHistoricoPagamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tipo Pagamento", "Nota Fiscal", "Código de Pagamento", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaHistoricoPagamento);

        consultarBotao.setBackground(new java.awt.Color(255, 102, 0));
        consultarBotao.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        consultarBotao.setForeground(new java.awt.Color(255, 255, 255));
        consultarBotao.setText("Consultar");
        consultarBotao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        consultarBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarBotaoActionPerformed(evt);
            }
        });

        excluirBotao.setBackground(new java.awt.Color(204, 0, 0));
        excluirBotao.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        excluirBotao.setForeground(new java.awt.Color(255, 255, 255));
        excluirBotao.setText("Excluir");
        excluirBotao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        excluirBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirBotaoActionPerformed(evt);
            }
        });

        editarBotao.setBackground(new java.awt.Color(0, 0, 204));
        editarBotao.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        editarBotao.setForeground(new java.awt.Color(255, 255, 255));
        editarBotao.setText("Editar");
        editarBotao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        editarBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarBotaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(187, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(187, 187, 187))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(consultarBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(excluirBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editarBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultarBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excluirBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editarBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consultarBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarBotaoActionPerformed
        //Obtem o ID do Paciente
        int idPaciente = pacRepo.getIdByEmailArquivo();
        
        //Verifica se o ID do paciente foi encontrado
        if (idPaciente != 0) {
            BD banco = new BD();
            banco.conectaBD();
            
            String query = "SELECT pg.ID, pg.tipoPagamento, pg.notaFiscal, pg.codigoPagamento, ta.valorConsulta "
                           + "FROM Pagamento pg "
                           + "INNER JOIN TipoAtendimento ta ON ta.ID = pg.ID_TipoAtendimento "
                           + "WHERE pg.ID_PACIENTE = ?";
            
            try {
                PreparedStatement ps = banco.getPreparedStatement(query);
                ps.setInt(1, idPaciente);
                
                ResultSet rs = ps.executeQuery();
                
                DefaultTableModel model = (DefaultTableModel) this.tabelaHistoricoPagamento.getModel();
                if (model.getRowCount() > 0) {
                    model.setNumRows(0);
                }
                
                while (rs.next()) {
                    String[] dados = {  rs.getString("pg.ID"),
                                        rs.getString("pg.tipoPagamento"),
                                        rs.getString("pg.notaFiscal"),
                                        rs.getString("pg.codigoPagamento"),
                                        rs.getString("ta.valorConsulta")};
                    
                    model.addRow(dados);
                    
                }
                this.tabelaHistoricoPagamento.setModel(model);
                
                rs.close();
                ps.close();
                banco.encerrarConexao();
                        
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao consulta no BD! Error: " + ex.getMessage());
                
            }
            
        } else {
            JOptionPane.showMessageDialog(this,
                    "Paciente não encontrado!!");
        }
    }//GEN-LAST:event_consultarBotaoActionPerformed

    private void excluirBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirBotaoActionPerformed
        int linhaSelecionada = this.tabelaHistoricoPagamento.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this,
                    "Favor selecione um registro para excluir!!");
            
            return;
        }
        
        String idPagamento =
                (String) this.tabelaHistoricoPagamento.getValueAt(linhaSelecionada, 0);
        
        int opcao = JOptionPane.showConfirmDialog(this,
                "Deseja realmente excluir o Pagamento " + idPagamento + "?",
                "Excluir", JOptionPane.OK_CANCEL_OPTION);
        
        if (opcao == 0) {
            BD banco = new BD();
            banco.conectaBD();
            
            String query  = "DELETE FROM Pagamento WHERE ID_TipoAtendimento = (SELECT ID From TipoAtendimento WHERE valorConsulta = ?)";
            String query2 = "DELETE FROM Pagamento WHERE ID = ?";
            
            try (PreparedStatement ps = banco.getPreparedStatement(query2)) {
                ps.setString(1, query);
                ps.setString(1,query2);
                boolean linhaApagada = ps.execute();
                
                if (!linhaApagada) {
                    //remove a linha da tabela
                    DefaultTableModel model = (DefaultTableModel) this.tabelaHistoricoPagamento.getModel();
                    model.removeRow(linhaSelecionada);
                    JOptionPane.showMessageDialog(this,
                            "Registro excluído com Sucesso!!");
                    
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Nenhum registro encontrado para excluir!!");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao excluir Registro!! Error: " + ex.getMessage());
                
                ex.printStackTrace();
                
            } finally {
                return;
                
            }
        }
    }//GEN-LAST:event_excluirBotaoActionPerformed

    private void editarBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarBotaoActionPerformed
        int linhaSelecionada = this.tabelaHistoricoPagamento.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this,
                    "Favor selecione um registro para editar!!");
            
            return;
        }
        
        //Obtendo os dados da linha selecionada
        String ID = (String) this.tabelaHistoricoPagamento.getValueAt(linhaSelecionada, 0);
        String tipoPagamento = (String)  this.tabelaHistoricoPagamento.getValueAt(linhaSelecionada, 1);
        String notaFiscal = (String) this.tabelaHistoricoPagamento.getValueAt(linhaSelecionada, 2);
        String codigoPagamento = (String) this.tabelaHistoricoPagamento.getValueAt(linhaSelecionada, 3);
        String valor = (String) this.tabelaHistoricoPagamento.getValueAt(linhaSelecionada, 4);
        
        //Solicitando a nova informação
        String novoTipoPagamento = JOptionPane.showInputDialog(this,
                "Editar o tipo do Pagamento (Pix, Boleto, Cartão de Crédito ou Débito):",
                tipoPagamento);
        
        if (novoTipoPagamento != null) {
            
            BD banco = new BD();
            boolean conectado = banco.conectaBD();
            
            if(!conectado) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao conectar ao banco de dados!!");
                
                return;
            }
            
            //Atualiza apenas o valor e o tipo
            String updateQuery = "UPDATE Pagamento SET tipoPagamento = ? WHERE ID LIKE ?";
            
            try (PreparedStatement ps = banco.getPreparedStatement(updateQuery)){
                ps.setString(1, novoTipoPagamento);
                ps.setString(2,ID);
                
                int rowsUpdated = ps.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this,
                            "Tipo de Pagamento atualizado com sucesso");
                    
                    //Atualiza os dados da tabela após edição
                    consultarBotaoActionPerformed(evt);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Nenhum registro encontrado para atualizar!!");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao atualizar o registro!! Error: " + ex.getMessage());
                
            } finally {
                banco.encerrarConexao();
            }
        }
    }//GEN-LAST:event_editarBotaoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton consultarBotao;
    private javax.swing.JButton editarBotao;
    private javax.swing.JButton excluirBotao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tabelaHistoricoPagamento;
    // End of variables declaration//GEN-END:variables
}
